//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param file (optional) 
     * @param autoShare (optional) 
     * @return Success
     */
    // // uploadFileEndpoint(file: FileParameter | undefined, autoShare: boolean | null | undefined, signal?: AbortSignal): Promise<UploadFileResponse> {
    // //     let url_ = this.baseUrl + "/api/upload";
    // //     url_ = url_.replace(/[?&]$/, "");
    // //
    // //     const content_ = new FormData();
    // //     if (file === null || file === undefined)
    // //         throw new Error("The parameter 'file' cannot be null.");
    // //     else
    // //         content_.append("file", file.data, file.fileName ? file.fileName : "file");
    // //     if (autoShare !== null && autoShare !== undefined)
    // //         content_.append("autoShare", autoShare.toString());
    // //
    // //     let options_: RequestInit = {
    // //         body: content_,
    // //         method: "POST",
    // //         signal,
    // //         headers: {
    // //             "Accept": "application/json"
    // //         }
    // //     };
    // //
    // //     return this.http.fetch(url_, options_).then((_response: Response) => {
    // //         return this.processUploadFileEndpoint(_response);
    // //     });
    // // }
    //
    // protected processUploadFileEndpoint(response: Response): Promise<UploadFileResponse> {
    //     const status = response.status;
    //     let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    //     if (status === 200) {
    //         return response.text().then((_responseText) => {
    //         let result200: any = null;
    //         result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UploadFileResponse;
    //         return result200;
    //         });
    //     } else if (status === 400) {
    //         return response.text().then((_responseText) => {
    //         let result400: any = null;
    //         result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ErrorResponse;
    //         return throwException("Bad Request", status, _responseText, _headers, result400);
    //         });
    //     } else if (status !== 200 && status !== 204) {
    //         return response.text().then((_responseText) => {
    //         return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         });
    //     }
    //     return Promise.resolve<UploadFileResponse>(null as any);
    // }

    /**
     * @return Success
     */
    listFilesEndpoint(signal?: AbortSignal): Promise<ListFilesResponse> {
        let url_ = this.baseUrl + "/api/files";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListFilesEndpoint(_response);
        });
    }

    protected processListFilesEndpoint(response: Response): Promise<ListFilesResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ListFilesResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ListFilesResponse>(null as any);
    }

    /**
     * @return Success
     */
    downloadFileEndpoint(fileId: string, signal?: AbortSignal): Promise<any> {
        let url_ = this.baseUrl + "/l/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDownloadFileEndpoint(_response);
        });
    }

    protected processDownloadFileEndpoint(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as any;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }
}

export interface UploadFileResponse {
    viewUrl?: string;
    shareUrl?: string | null;
}

/** the dto used to send an error response to the client */
export interface ErrorResponse {
    /** the http status code sent to the client. default is 400. */
    statusCode?: number;
    /** the message for the error response */
    message?: string;
    /** the collection of errors for the current context */
    errors?: { [key: string]: string[]; };
}

export interface UploadFileRequest {
    file?: string;
    autoShare?: boolean | null;
}

export interface ListFilesResponse {
    files?: ListFilesFileModel[];
}

export interface ListFilesFileModel {
    fileName?: string;
    shareLink?: string;
}

export interface DownloadFileRequest {
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}