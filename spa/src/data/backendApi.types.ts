/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/upload": {
    post: operations["UploadFileEndpoint"];
  };
  "/api/files": {
    get: operations["ListFilesEndpoint"];
    post: operations["CreateFileEndpoint"];
  };
  "/l/{fileId}": {
    get: operations["DownloadFileEndpoint"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UploadFileResponse: {
      viewUrl?: string;
      shareUrl?: string | null;
    };
    /** @description the dto used to send an error response to the client */
    ErrorResponse: {
      /**
       * Format: int32
       * @description the http status code sent to the client. default is 400.
       * @default 400
       */
      statusCode?: number;
      /**
       * @description the message for the error response
       * @default One or more errors occurred!
       */
      message?: string;
      /** @description the collection of errors for the current context */
      errors?: {
        [key: string]: string[];
      };
    };
    UploadFileRequest: {
      /** Format: binary */
      file?: string;
      autoShare?: boolean | null;
    };
    ListFilesResponse: {
      files?: components["schemas"]["ListFilesFileModel"][];
    };
    ListFilesFileModel: {
      fileName?: string;
      shareLink?: string;
    };
    DownloadFileRequest: Record<string, never>;
    CreateFileResponse: {
      /** Format: guid */
      id?: string;
      uploadUrl?: string;
      /** Format: date-time */
      uploadUrlExpires?: string;
    };
    CreateFileRequest: {
      /** Format: guid */
      clientId?: string;
      displayName?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  UploadFileEndpoint: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["UploadFileRequest"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["UploadFileResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/problem+json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  ListFilesEndpoint: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ListFilesResponse"];
        };
      };
    };
  };
  CreateFileEndpoint: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFileRequest"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["CreateFileResponse"];
        };
      };
    };
  };
  DownloadFileEndpoint: {
    parameters: {
      path: {
        fileId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "text/plain": unknown;
          "application/json": unknown;
        };
      };
    };
  };
}
